<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="{DynamicResource ComboBox.Popup.BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        x:Name="Bd"
                        Padding="{TemplateBinding Control.Padding}"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.Background}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="false" />
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource ComboBoxItem.ItemsviewHover.Background}" />
                            <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewHover.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="true" />
                                <Condition Property="UIElement.IsMouseOver" Value="false" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource ComboBoxItem.ItemsviewSelected.Background}" />
                            <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewSelected.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="true" />
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource ComboBoxItem.ItemsviewSelectedHover.Background}" />
                            <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewSelectedHover.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="true" />
                                <Condition Property="UIElement.IsMouseOver" Value="false" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}" />
                            <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewSelectedNoFocus.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="false" />
                                <Condition Property="UIElement.IsMouseOver" Value="false" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource ComboBoxItem.ItemsviewFocus.Background}" />
                            <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewFocus.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="false" />
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource ComboBoxItem.ItemsviewHoverFocus.Background}" />
                            <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewHoverFocus.Border}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="templateRoot"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        SnapsToDevicePixels="true">
                        <Border
                            x:Name="splitBorder"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                            Margin="0"
                            HorizontalAlignment="Right"
                            BorderBrush="Transparent"
                            BorderThickness="1"
                            SnapsToDevicePixels="true">
                            <Path
                                x:Name="arrow"
                                Margin="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="F1 M 0,0 L 2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0 Z"
                                Fill="{DynamicResource ComboBox.Static.Glyph}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Border.Background" Value="{DynamicResource ComboBox.Static.Background}" />
                            <!--<Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{DynamicResource ComboBox.Static.Editable.Border}" />-->
                            <Setter TargetName="splitBorder" Property="Border.Background" Value="{DynamicResource ComboBox.Static.Editable.Button.Background}" />
                            <Setter TargetName="splitBorder" Property="Border.BorderBrush" Value="{DynamicResource ComboBox.Static.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <!--<Setter TargetName="arrow" Property="Shape.Fill" Value="{DynamicResource ComboBox.MouseOver.Glyph}" />-->
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Border.Background" Value="{DynamicResource ComboBox.MouseOver.Background}" />
                            <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{DynamicResource ComboBox.MouseOver.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Border.Background" Value="Transparent" />
                            <!--<Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{DynamicResource ComboBox.MouseOver.Editable.Border}" />-->
                            <!--<Setter TargetName="splitBorder" Property="Border.Background" Value="REd" />-->
                            <!--<Setter TargetName="splitBorder" Property="Border.BorderBrush" Value="{DynamicResource ComboBox.MouseOver.Editable.Button.Border}" />-->
                        </MultiDataTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Shape.Fill" Value="{DynamicResource ComboBox.Pressed.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Border.Background" Value="{DynamicResource ComboBox.Pressed.Background}" />
                            <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{DynamicResource ComboBox.Pressed.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Border.Background" Value="{DynamicResource ComboBox.Pressed.Editable.Background}" />
                            <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{DynamicResource ComboBox.Pressed.Editable.Border}" />
                            <Setter TargetName="splitBorder" Property="Border.Background" Value="{DynamicResource ComboBox.Pressed.Editable.Button.Background}" />
                            <Setter TargetName="splitBorder" Property="Border.BorderBrush" Value="{DynamicResource ComboBox.Pressed.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="arrow" Property="Shape.Fill" Value="{DynamicResource ComboBox.Disabled.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Border.Background" Value="{DynamicResource ComboBox.Disabled.Background}" />
                            <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{DynamicResource ComboBox.Disabled.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Border.Background" Value="{DynamicResource ComboBox.Disabled.Editable.Background}" />
                            <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{DynamicResource ComboBox.Disabled.Editable.Border}" />
                            <Setter TargetName="splitBorder" Property="Border.Background" Value="{DynamicResource ComboBox.Disabled.Editable.Button.Background}" />
                            <Setter TargetName="splitBorder" Property="Border.BorderBrush" Value="{DynamicResource ComboBox.Disabled.Editable.Button.Border}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                Margin="1"
                AllowsTransparency="true"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Border
                    x:Name="dropDownBorder"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="1,0,1,1">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas
                                x:Name="canvas"
                                Width="0"
                                Height="0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Top">
                                <Rectangle
                                    x:Name="opaqueRect"
                                    Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                    Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                    Fill="{Binding Background, ElementName=dropDownBorder}" />
                            </Canvas>
                            <ItemsPresenter
                                x:Name="ItemsPresenter"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton
                x:Name="toggleButton"
                Grid.ColumnSpan="2" Grid.Column="0"
                Background="{TemplateBinding Control.Background}"
                BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource ComboBoxToggleButton}" />
            <ContentPresenter
                Grid.Column="0" x:Name="contentPresenter"
                Margin="{TemplateBinding Control.Padding}"
                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                IsHitTestVisible="false"
                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Background="Transparent"
                        Focusable="false"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                AllowsTransparency="true"
                IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Border
                    x:Name="dropDownBorder"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="1,0,1,1">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas
                                x:Name="canvas"
                                Width="0"
                                Height="0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Top">
                                <Rectangle
                                    x:Name="opaqueRect"
                                    Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                    Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                    Fill="{Binding Background, ElementName=dropDownBorder}" />
                            </Canvas>
                            <ItemsPresenter
                                x:Name="ItemsPresenter"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton
                x:Name="toggleButton"
                Grid.ColumnSpan="2" Grid.Column="0"
                Background="{TemplateBinding Control.Background}"
                BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource ComboBoxToggleButton}" />
            <Border
                Grid.Column="0" x:Name="border"
                Margin="{TemplateBinding Control.BorderThickness}"
                Background="{DynamicResource TextBox.Static.Background}">
                <TextBox
                    x:Name="PART_EditableTextBox"
                    Margin="{TemplateBinding Control.Padding}"
                    HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    CaretBrush="{DynamicResource CaretBrush}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{DynamicResource ComboBoxEditableTextBox}" />
            </Border>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
                <Setter Property="Control.Foreground" Value="{DynamicResource ForegroundBrush}" />
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ComboBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="6,3,5,3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource ComboBoxTemplate}" />
        <Style.Triggers>
            <Trigger Property="ComboBox.IsEditable" Value="true">
                <Setter Property="Control.IsTabStop" Value="false" />
                <Setter Property="Control.Padding" Value="2" />
                <Setter Property="Control.Template" Value="{DynamicResource ComboBoxEditableTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#region InteractiveRebase-->
    <Style x:Key="InteractiveRebaseToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="templateRoot"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{DynamicResource ComboBox.Static.Border}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        SnapsToDevicePixels="true">
                        <Border
                            x:Name="splitBorder"
                            Margin="0"
                            HorizontalAlignment="Right"
                            BorderBrush="Transparent"
                            BorderThickness="1"
                            SnapsToDevicePixels="true">
                            <Path
                                x:Name="arrow"
                                Margin="0,0,4,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="F1 M 0,0 L 2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0 Z"
                                Fill="{TemplateBinding Control.Foreground}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true">
                            <Setter TargetName="templateRoot" Property="Border.Background" Value="{DynamicResource InteractiveRebase.ComboBoxButton.MouseOver}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="InteractiveRebaseComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="10" />
            </Grid.ColumnDefinitions>
            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                Margin="1"
                AllowsTransparency="true"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                TextElement.Foreground="{DynamicResource ForegroundBrush}">
                <Border
                    x:Name="dropDownBorder"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    Background="{DynamicResource ComboBox.Popup.BackgroundBrush}"
                    BorderBrush="{DynamicResource ComboBox.Popup.BorderBrush}"
                    BorderThickness="1,1,1,1">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas
                                x:Name="canvas"
                                Width="0"
                                Height="0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Top">
                                <Rectangle
                                    x:Name="opaqueRect"
                                    Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                    Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                    Fill="{Binding Background, ElementName=dropDownBorder}" />
                            </Canvas>
                            <ItemsPresenter
                                x:Name="ItemsPresenter"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton
                x:Name="toggleButton"
                Grid.ColumnSpan="2" Grid.Column="0"
                Background="{TemplateBinding Control.Background}"
                BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Foreground="{TemplateBinding Control.Foreground}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource InteractiveRebaseToggleButton}" />
            <ContentPresenter
                Grid.Column="0" x:Name="contentPresenter"
                Margin="{TemplateBinding Control.Padding}"
                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                IsHitTestVisible="false"
                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                TextElement.Foreground="{TemplateBinding Control.Foreground}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style
        x:Key="InteractiveRebaseComboBoxStyle"
        BasedOn="{StaticResource {x:Type ComboBox}}"
        TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="4,0,4,1" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template" Value="{DynamicResource InteractiveRebaseComboBoxTemplate}" />
        <Style.Resources>
            <Style BasedOn="{StaticResource {x:Type ComboBoxItem}}" TargetType="{x:Type ComboBoxItem}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            </Style>
        </Style.Resources>
    </Style>
    <!--#endregion-->
</ResourceDictionary>